@page "/"
@using CnD.CommunalPayments.Contracts.Models.Invoices.Response
@using CnD.CommunalPayments.Contracts.Models.Periods.Response
@using CnD.CommunalPayments.Contracts.Models.Providers.Response
@using CnD.CommunalPayments.Front.ApiClient
@using CnD.CommunalPayments.Front.ApiClient.Base

@inject IInvoiceClientService invoiceClient
@inject IPeriodClientService periodClient
@inject IProviderClientService providersClient

@if (_invoices == null || _periods == null|| _providers == null)
{
    <Spinner></Spinner>
}
else
{
    <Invoices Repository="invoiceClient"
          Providers="_providers.ToList()"
          Periods="_periods.ToList()"
          OnClickSetService="OpenInvoceServices" />


    @*@if (!_isServices)
    {
        <Invoices Repository="invoiceClient"
                  Providers="_providers.ToList()"
                  Periods="_periods.ToList()"
                  OnClickSetService="OpenInvoceServices" />
    }
    else
    {
        <InvoicesServices Invoice="_invoice"
                      OnClickReturnToInvoces="CloseInvoiceServices" />
    }*@
}







@code{
    private IEnumerable<InvoiceResponse> _invoices;
    private IEnumerable<PeriodResponse> _periods;
    private IEnumerable<ProviderResponse> _providers;

    private bool _isServices;
    private InvoiceResponse _invoice;

    protected override async Task OnInitializedAsync()
    {
        _periods = await periodClient.GetAllAsync();
        _providers = await providersClient.GetAllAsync();
        _invoices = await invoiceClient.GetAllAsync();

        _isServices = default;
    }

    private void OpenInvoceServices(InvoiceResponse invoice)
    {
        _isServices = true;
        _invoice = invoice;
    }

    private void CloseInvoiceServices()
    {
        _isServices = false;
    }
}